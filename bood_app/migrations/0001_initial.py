# Generated by Django 5.0 on 2024-01-02 16:40

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FAQ",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("question", models.CharField(max_length=255, verbose_name="Вопрос")),
                ("answer", models.TextField(verbose_name="Ответ")),
            ],
            options={
                "verbose_name": "FAQ",
                "verbose_name_plural": "FAQ",
            },
        ),
        migrations.CreateModel(
            name="FemaleType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255, unique=True, verbose_name="Название")),
            ],
            options={
                "verbose_name": "Тип женщины",
                "verbose_name_plural": "Типы женщины",
            },
        ),
        migrations.CreateModel(
            name="MicroElement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "iron",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Железо",
                    ),
                ),
                (
                    "calcium",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Кальций",
                    ),
                ),
                (
                    "sodium",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Натрий",
                    ),
                ),
                (
                    "potassium",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Калий",
                    ),
                ),
                (
                    "phosphorus",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Фосфор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Микроэлемент",
                "verbose_name_plural": "Микроэлементы",
            },
        ),
        migrations.CreateModel(
            name="ProductCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(db_index=True, max_length=255, unique=True, verbose_name="Название")),
                ("description", models.TextField(blank=True, default="", verbose_name="Описание")),
                ("image", models.URLField(blank=True, default="", verbose_name="Изображение")),
            ],
            options={
                "verbose_name": "Категория продуктов",
                "verbose_name_plural": "Категории продуктов",
            },
        ),
        migrations.CreateModel(
            name="Vitamin",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "a",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Витамин А",
                    ),
                ),
                (
                    "b1",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Витамин В1",
                    ),
                ),
                (
                    "b2",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Витамин В2",
                    ),
                ),
                (
                    "b3",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Витамин В3",
                    ),
                ),
                (
                    "e",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Витамин Е",
                    ),
                ),
                (
                    "c",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Витамин С",
                    ),
                ),
            ],
            options={
                "verbose_name": "Витамин",
                "verbose_name_plural": "Витамины",
            },
        ),
        migrations.CreateModel(
            name="Water",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "weight",
                    models.PositiveSmallIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)], verbose_name="Объем"
                    ),
                ),
            ],
            options={
                "verbose_name": "Вода",
                "verbose_name_plural": "Вода",
            },
        ),
        migrations.CreateModel(
            name="PersonCard",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "height",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(250),
                        ],
                        verbose_name="Рост",
                    ),
                ),
                (
                    "age",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(18),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Возраст",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "Мужчина"), ("female", "Женщина")], max_length=6, verbose_name="Пол"
                    ),
                ),
                (
                    "target",
                    models.CharField(
                        blank=True,
                        choices=[("keep", "Поддержание формы"), ("gain", "Набор веса"), ("lose", "Похудение")],
                        default="",
                        max_length=4,
                        verbose_name="Цель",
                    ),
                ),
                (
                    "activity",
                    models.CharField(
                        choices=[
                            ("1.2", "Сидячий или лежачий"),
                            ("1.375", "Умственный труд"),
                            ("1.55", "Лёгкий физический труд (активная работа «на ногах» или тренировки 2-3 в неделю)"),
                            ("1.7", "Физический труд средней тяжести (ежедневные тренировки)"),
                            ("1.9", "Тяжелый физический труд (профессиональные спортсмены)"),
                        ],
                        max_length=5,
                        verbose_name="Активность",
                    ),
                ),
                ("image", models.URLField(blank=True, default="", verbose_name="Фото")),
                (
                    "femaletype",
                    models.ManyToManyField(
                        blank=True, related_name="personcard", to="bood_app.femaletype", verbose_name="Тип женщины"
                    ),
                ),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Карточка пользователя",
                "verbose_name_plural": "Карточки пользователей",
            },
        ),
        migrations.CreateModel(
            name="Measurement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "weight",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(15.0),
                            django.core.validators.MaxValueValidator(350.0),
                        ],
                        verbose_name="Вес",
                    ),
                ),
                (
                    "chest",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(30.0),
                            django.core.validators.MaxValueValidator(300.0),
                        ],
                        verbose_name="Объем груди",
                    ),
                ),
                (
                    "waist",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(30.0),
                            django.core.validators.MaxValueValidator(300.0),
                        ],
                        verbose_name="Объем талии",
                    ),
                ),
                (
                    "hips",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(30.0),
                            django.core.validators.MaxValueValidator(300.0),
                        ],
                        verbose_name="Объем бедер",
                    ),
                ),
                (
                    "hand",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10.0),
                            django.core.validators.MaxValueValidator(30.0),
                        ],
                        verbose_name="Объем кисти",
                    ),
                ),
                ("datetime_add", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время замера")),
                (
                    "person_card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="measurements",
                        to="bood_app.personcard",
                        verbose_name="Карточка пользователя",
                    ),
                ),
            ],
            options={
                "verbose_name": "Замер",
                "verbose_name_plural": "Замеры",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(db_index=True, max_length=255, unique=True, verbose_name="Название")),
                (
                    "proteins",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Белки",
                    ),
                ),
                (
                    "fats",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Жиры",
                    ),
                ),
                (
                    "carbohydrates",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Углеводы",
                    ),
                ),
                (
                    "calories",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Калории",
                    ),
                ),
                (
                    "water",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Вода",
                    ),
                ),
                (
                    "proteins_proportion",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Б",
                    ),
                ),
                (
                    "fats_proportion",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Ж",
                    ),
                ),
                (
                    "carbohydrates_proportion",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="У",
                    ),
                ),
                (
                    "microelements",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product",
                        to="bood_app.microelement",
                        verbose_name="Микроэлементы",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="product",
                        to="bood_app.productcategory",
                        verbose_name="Категория",
                    ),
                ),
                (
                    "vitamins",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product",
                        to="bood_app.vitamin",
                        verbose_name="Витамины",
                    ),
                ),
            ],
            options={
                "verbose_name": "Продукт",
                "verbose_name_plural": "Продукты",
            },
        ),
        migrations.AddField(
            model_name="personcard",
            name="exclude_products",
            field=models.ManyToManyField(
                blank=True, related_name="personcard", to="bood_app.product", verbose_name="Исключенные продукты"
            ),
        ),
        migrations.AddField(
            model_name="personcard",
            name="exclude_category",
            field=models.ManyToManyField(
                blank=True,
                related_name="personcard",
                to="bood_app.productcategory",
                verbose_name="Исключенные категории продуктов",
            ),
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(db_index=True, max_length=255, verbose_name="Название")),
                ("description", models.TextField(blank=True, default="", verbose_name="Описание")),
                ("image", models.URLField(blank=True, default="", verbose_name="Изображение")),
                ("is_active", models.BooleanField(default=True, verbose_name="Активен")),
                (
                    "person_card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe",
                        to="bood_app.personcard",
                        verbose_name="Карточка пользователя",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рецепт",
                "verbose_name_plural": "Рецепты",
            },
        ),
        migrations.CreateModel(
            name="ProductWeight",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "weight",
                    models.PositiveSmallIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)], verbose_name="Вес"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_weight",
                        to="bood_app.product",
                        verbose_name="Продукт",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_weight",
                        to="bood_app.recipe",
                        verbose_name="Рецепт",
                    ),
                ),
            ],
            options={
                "verbose_name": "Продукт с весом",
                "verbose_name_plural": "Продукты с весом",
            },
        ),
        migrations.CreateModel(
            name="Eating",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("datetime_add", models.DateTimeField(auto_now_add=True, verbose_name="Дата и время")),
                (
                    "person_card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eating",
                        to="bood_app.personcard",
                        verbose_name="Карточка пользователя",
                    ),
                ),
                (
                    "product_weight",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eating",
                        to="bood_app.productweight",
                        verbose_name="Продукт с весом",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eating",
                        to="bood_app.recipe",
                        verbose_name="Рецепт",
                    ),
                ),
                (
                    "water",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eating",
                        to="bood_app.water",
                        verbose_name="Вода",
                    ),
                ),
            ],
            options={
                "verbose_name": "Прием пищи",
                "verbose_name_plural": "Приемы пищи",
            },
        ),
    ]
